import sys
import string
import time
import csv
import os
import os.path
from tkinter import *
import tkinter.constants as Tkconstants
import tkinter.filedialog as tkFileDialog
from tkinter import ttk
#import simpenums as Enu
from enum import Enum
import GUInotebook as NB


DEBUGIN = False

#for looking up the next tab to switch on by line number
tabSwitchNum = {10:'Info', 26:'Extruder', 41:'Layer', 65:'Additions', 75:'Infill', 89:'Support', 98:'Temperature', 109:'Cooling',
				138:'GCode', 150:'Scripts', 163:'Other', 184:'Advanced', 185:'LAST'}
 
class TabEnum(Enum):
	Info = 0
	Extruder = 1
	Layer = 2
	Additions = 3
	Infill = 4
	Support = 5
	Temperature = 6
	Cooling = 7
	GCode = 8
	Scripts = 9
	Other = 10
	Advanced = 11
	
	def describe(self):
		return self.name, self.value
		
	def __str__(self):
		return '{0}'.format(self.name)
		
	@property
	def getTabValue(self):
		retStr = TabEnum(self.tabNum)
		return retStr
	
#On this line go to next tab.
switchLineNums = [10,26,41,65,75,89,98,109,138,150,163,184,185]

def lineArray(linein, lineNum):
	linein = StripUnwanted(linein)
	arrayOut = linein.split(',',1)
	if(len(arrayOut) < 2) or lineNum == 1 :
		arrayOut = ["",""]
		if(lineNum<3):
			if lineNum == 2: 
				arrayOut[0] = "-----"
				arrayOut[1] = "-----"
			else:			
				if lineNum == 0:
					arrayOut[0] = "Version: "
					
				if lineNum == 1:
					arrayOut[0] = "Date: "
				arrayOut[1] = linein
			write(str(arrayOut))
		else: 
			arrayOut[0] = linein	
	return arrayOut

def StripUnwanted(strin): #Remove the unwanted begining of the line.
	
	strin = strin.replace(';   ', "")
	strin = strin.replace('; ', "")
	strin = strin.replace('; G-Code generated by Simplify3D(R) ', "")
	strin = strin.replace('\n',"")
	#write("\nStartStrip: "+strin)
	return strin

def mainRead(File1, File2, outFile, note):
	
	if DEBUGIN:
		File1 = r'C:\Users\peter.t.copeland\Documents\Python\HandOfThe_King.gcode'
		File2 = r'C:\Users\peter.t.copeland\Documents\Python\HandOfThe_King2.gcode'	
	
	else:
		File1 = File1.get()
		File2 = File2.get()
	
	LastLine = 185 #where the actual Gcode begins. 
	startTime = time.time()
	currentTab = 0
	previousLast = 0 #start at 0
	nextLineNumberPos = 0 #The next  
	LineNumberPos = 0
	with open(File1) as myFile1:
		with open(File2) as myFile2:
			readLines1 = myFile1.readlines()[0:LastLine]
			readLines2 = myFile2.readlines()[0:LastLine]
			for i in TabEnum:				
				strTabname=str(i)
				TabAdded = note.add_tab(text= strTabname)
				currentLines_F1 = readLines1[previousLast:switchLineNums[currentTab]]
				currentLines_F2 = readLines2[previousLast:switchLineNums[currentTab]]
				RowPos= 0
				
				for lineData in range(len(currentLines_F1)):
					WriteDataAsEntry = ""
					MatchingLines = False
					CompareDataF1 = lineArray(currentLines_F1[lineData], LineNumberPos)
					CompareDataF2 = lineArray(currentLines_F2[lineData], LineNumberPos)	
					WriteDataAsEntry = str(CompareDataF1[0]) + ':\t'+str(CompareDataF1[1]) +' : ' + str(CompareDataF2[1])
					write(WriteDataAsEntry)		
												
					MatchingLines = str(CompareDataF1[1]) == str(CompareDataF2[1])
					NB.Lbl(TabAdded, str(CompareDataF1[0]), 1, RowPos, (W))
					LineAdd = '\t'+str(CompareDataF1[1]) + ' : '+ str(CompareDataF2[1])		
					
					if MatchingLines == True:
						NB.Lbl(TabAdded, LineAdd, 2, RowPos, (W))
					else:
						NB.Lblc(TabAdded, LineAdd, 'grey', 'red', 2, RowPos, (W))

					RowPos = RowPos + 1
						#write("CLS: " + CompareLineStart) 
					LineNumberPos = LineNumberPos + 1
				previousLast = switchLineNums[currentTab]
				#write('Cng previousLast:' + str(previousLast))	
				currentTab = currentTab + 1 #increment to the next tab
				#write('Cng CurrentTab#:'+ str(currentTab))
	elapsedTime = time.time() - startTime
	m, s = divmod(elapsedTime, 60)
	h, m = divmod(m, 60)
	writeToLog("\nThe operations took: %02d:%02d:%02d (H:M:S)" % (h, m, s))
	writeToLog("\nFinished!")

def askopenfilename(fileNum, *args):
	filename = tkFileDialog.askopenfilename(**NB.file_opt)
	if filename:
		if(fileNum == 0):
			File1.set(filename)
		if(fileNum == 1):
			File2.set(filename)
		

def asksaveasfilename():
	filename = tkFileDialog.asksaveasfilename(**NB.file_opt)
	if filename:
		return open(filename, 'w')

def writeToLog(msg):
	if DEBUGIN:
		numlines= log.index('end - 1 line').split('.')[0]
		log['state']='normal'
		if numlines == 200:
			log.delete(1.0, 2.0)
		if log.index('end-1c')!='1.0':
			log.insert('end', '\n')
		log.insert('end', msg)
		log['state'] = 'disabled'
		log.yview(END)
	
def LookupEnum(type, refNum):
	refNum = int(refNum)
	if(type == 1): #tab
		if refNum < len(TabEnum):
			write(str(TabEnum(refNum)))
		else:
			write('Not found Max:' + str(len(TabEnum)-1))
	else: #label
		write(Enu.LineNames.get(refNum, 'Number not defined'))
	
if __name__ == "__main__":
	def write(x): writeToLog(str(x))
	root = Tk()
	root.title("Simplify3d gCode")
	note = NB.Notebook(root, width= 800, height =700, activefg = 'Gray', inactivefg = 'black')
	note.grid()

	File1 = StringVar()
	File2 = StringVar()
	outFile = ""
	
	#tab12 
	tab12 = note.add_tab(text = "Settings")
	pt12 = NB.add_Pane(tab12)
	fr12 = NB.add_LblFrame(pt12, "File Selections")	
	
	NB.LblTV(fr12, File1, 2, 2, W)
	NB.LblTV(fr12, File2, 2, 3, W)
	
	Button(fr12, text="Open File 2", command=(lambda:askopenfilename(1))).grid(column=1, row=3, sticky=(W))
	Button(fr12, text="Open File 1", command=(lambda:askopenfilename(0))).grid(column=1, row=2, sticky=(W))
	
	if DEBUGIN:
		Label(fr12, text="#####DEBUGGING######", bg="black", fg = "red").grid(column=2, row=1, sticky=(W))
		Label(fr12, text="Lookup what Line/Enum#?", bg="white", fg = "blue").grid(column=1, row=5, sticky=(W))
		fr12_2 = NB.add_LblFrame(pt12, "Console")
		
		txt = Text(fr12, width=50, height=2)
		txt.focus()
		txt.grid(column=2, row=5, sticky=(W))
		Button(fr12, text="Get Tab#", command=(lambda: LookupEnum(1, txt.get('1.0', END)))).grid(column=1, row=6, sticky=(W))		
		log = Text(fr12_2, state='disabled')#.grid(column=2, row=3, sticky=(W))
		log.grid(column=1, row=1, sticky=(N,W))
	
	Button(fr12, text="Run Files", command=(lambda: mainRead(File1, File2, outFile, note))).grid(column=1, row=4, sticky=(W))
	Button(fr12, text="EXIT", command=(lambda: sys.exit())).grid(column=1, row=8, sticky=(W, E))

	
	note.focus_on(tab12)
	root.mainloop()
